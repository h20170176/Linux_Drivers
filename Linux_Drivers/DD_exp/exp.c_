#include<linux/kernel.h>
#include<linux/module.h>
#include<linux/init.h>
#include<linux/list.h>
#include<linux/slab.h>

typedef struct link_list{
   struct list_head list;
   int val;
}llist;

__init int my_init(void)
{
   printk(KERN_INFO "Inside %s function of %s file\n", __FUNCTION__ ,__FILE__);

   llist *one,*two,*three,*container;
   struct list_head head;
   struct list_head *list_ptr;

   INIT_LIST_HEAD(&head);

   one=kmalloc(sizeof(struct link_list *),GFP_KERNEL);
   two=kmalloc(sizeof(struct link_list *),GFP_KERNEL);
   three=kmalloc(sizeof(struct link_list *),GFP_KERNEL);

   one->val=10;
   two->val=11;
   three->val=12;

   list_add(&one->list,&head);
   list_add_tail(&two->list,&head);
   list_add(&three->list,&head);

      list_del(head.next);
      list_del(head.next);

   list_for_each(list_ptr,&head)
   {
      container=container_of(list_ptr,struct link_list,list);
      printk(KERN_INFO "Value of link list data = %d\n",container->val);
   }
   kfree(one);
   kfree(two);
   kfree(three);

   return 0;
}

__exit void my_exit(void)
{
   printk(KERN_INFO "Inside %s function of %s file\n", __FUNCTION__ ,__FILE__);

}

module_init(my_init);
module_exit(my_exit);

MODULE_AUTHOR("SASANK");
MODULE_DESCRIPTION("LINK LIST EXPERIMENTS");
MODULE_LICENSE("GPL");
